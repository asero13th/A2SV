#User function Template for python3

class Solution:
    #Heapify function to maintain heap property.
    def heapify(self,arr, n, i):
        # code here
        largest = i #let largest be the root
        l = 2 * i + 1 #left
        r = 2 * i + 2 #right
        
        if l < n and arr[l] > arr[largest]:
            largest = l
        
        if r < n and arr[r] > arr[largest]:
            lartest = r
            
            
        if largest != i:
            arr[i],arr[largest] = arr[largest], arr[i]
            self.heapify(arr, n, largest)
            
        
    
    #Function to build a Heap from array.
    def buildHeap (self,heap,n):
        leng = len(arr)
        for idx in range(leng-1, -1, -1):
            self.heapify(arr, n, idx)
        
    #Function to sort an array using Heap Sort.    
    def HeapSort(self, arr, n):
        
    
        self.buildHeap(arr,n)
        leng = len(arr)
        while leng >0:
        
            arr[0], arr[leng -1] = arr[leng-1], arr[0]
            leng -=1

            self.heapify(arr, leng, 0)


#{ 
 # Driver Code Starts
#Initial Template for Python 3
import atexit
import io
import sys

# Contributed by : Mohit Kumara

_INPUT_LINES = sys.stdin.read().splitlines()
input = iter(_INPUT_LINES).__next__
_OUTPUT_BUFFER = io.StringIO()
sys.stdout = _OUTPUT_BUFFER

@atexit.register

def write():
    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())

if __name__ == '__main__':
    test_cases = int(input())
    for cases in range(test_cases):
        n = int(input())
        arr = list(map(int, input().strip().split()))
        Solution().HeapSort(arr,n)
        print(*arr)

# } Driver Code Ends
